name: Node.js CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clean npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: List files in node_modules/.bin
        run: ls -la node_modules/.bin

      - name: Check executable permissions before
        run: stat node_modules/.bin/mocha

      - name: Make mocha executable
        run: chmod +x node_modules/.bin/mocha

      - name: Check executable permissions after
        run: stat node_modules/.bin/mocha

      - name: Check Node.js version
        run: node -v

      - name: Check npm version
        run: npm -v

      - name: Check Mocha version
        run: npx mocha --version

      - name: Run tests with explicit node command
        run: node_modules/.bin/mocha test/**/*.test.js --exit

      - name: Ensure tests pass before any further steps
        if: failure()
        run: exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success() # Only run if the tests job succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa

      - name: Add VM to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            #!/bin/bash

            # Define the project directory path
            PROJECT_DIR=/var/www/myapp

            # Create the project directory with sudo if it doesn't exist
            if [ ! -d "$PROJECT_DIR" ]; then
              sudo mkdir -p "$PROJECT_DIR"
              sudo chown $USER:$USER "$PROJECT_DIR" # Ensure correct ownership
            fi

            # Change to the project directory
            cd "$PROJECT_DIR" || exit

            # Initialize Git repository if not already done
            if [ ! -d ".git" ]; then
              git init
              git remote add origin git@github.com:kavyapmmb98/Mocha-TestApi.git
            fi

            # Stop existing PM2 service
            pm2 stop mocha-apitest || true

            # Pull latest code from the repository
            git pull origin main

            # Handle untracked files if necessary
            git add .
            git commit -m "Save untracked files" || true

            # Install dependencies
            npm install

            # Check for vulnerabilities and fix if possible
            npm audit fix

            # Run build and migrate scripts
            npm run build || { echo "Build script failed"; exit 1; }
            # npm run migrate || { echo "Migrate script failed"; exit 1; }

            # Restart the application with PM2
            pm2 restart mocha-apitest
          EOF
